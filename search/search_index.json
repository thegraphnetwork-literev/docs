{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LiteRev","text":"<p>LiteRev is a tool that reduces searching times, showing the relationships between searching topics.</p> <p>You can easily find the most relevant content from several scientific databases.</p> <p>Whether you are a student, scientist, or professional, LiteRev simplifies the process of finding the articles you need.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#release-notes","title":"Release Notes","text":""},{"location":"changelog/#040-2023-07-20","title":"0.4.0 (2023-07-20)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>backend: Add begin and end dates for search on arXiv (#182) (6899635), closes #154</li> <li>custom stopwords: create a new set of custom stopwords from a file (#170) (284efcc)</li> <li>helper button: adding a helper button in search page (#186) (9dbcde3), closes #168</li> <li>pdf flag, refactor: add DOWNLOAD_PDF_ARTICLE flag, refactor pdf downloading functions (#172) (0fa5933)</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>backend: Fix <code>list_id</code> input as a dictionary in <code>generate_threads</code> (#191) (82fb89b), closes #139 #182 #187</li> <li>backend: Fix errors from <code>print_research</code> in <code>view_functions</code> (#178) (3b94603)</li> <li>filtering by user in historical research page (#227) (4746aa4)</li> <li>finish-button: fix finish button functionality in the table select page (#215) (0b3b439)</li> <li>fix bugs introduced by #193 (#206) (e067d14)</li> <li>Fix issues on the application (#207) (c14607e)</li> <li>Fix release-replacements (1ff7d6c)</li> <li>Fix semantic release workflow (#211) (0e063a7)</li> <li>Fix the release workflow (#229) (3d4af35)</li> <li>Fix view_functions and tests (#185) (0c7d914)</li> <li>Remove duplicated methods from arXiv (#194) (193ae02)</li> <li>update graph function: updating BackEnd clustering.py and view_functions.py files (#174) (fbb35f8)</li> <li>updating graph code: updating files to show proper graph results (#195) (e6f42bc)</li> </ul>"},{"location":"changelog/#reverts","title":"Reverts","text":"<ul> <li>Revert \"fix(backend): Fix errors from <code>print_research</code> in <code>view_functions</code> (#178)\" (#183) (0551374), closes #178 #183</li> </ul>"},{"location":"changelog/#030-2023-06-21","title":"0.3.0 (2023-06-21)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>testing: adding more tests (#136) (7086b88)</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>frontend: adding frontend updates (#146) (63c7b41)</li> <li>Increase search limit in Research model/form (#153) (4281911), closes #85</li> <li>progress bar: fixing zero division in progress bar (#160) (6d6dcaa)</li> </ul>"},{"location":"changelog/#020-2023-06-06","title":"0.2.0 (2023-06-06)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Adding database select in Search page (#94) (f418409)</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>backend tests: enabling and updating backend test (#126) (58a6afc)</li> <li>dev: Fix development workflow (#140) (ea435a5)</li> <li>release: Fix .releaserc.json (fccffd2)</li> <li>release: Remove poetry command from release pipeline (e1df732)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at github:LiteRev/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in     troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Documentation files are located at <code>./docs</code>. Since the <code>API</code> documentation is based on the docstrings in the python files, writing good docstrings will help us to have better documentation.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at github:LiteRev/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to     implement.</li> <li>Remember that this is a volunteer-driven project, and that     contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>For development, we encourage you to use <code>conda</code>. If you don't know what is that, check these links:</p> <ul> <li>In Spanish: https://opensciencelabs.org/blog/como-instalar-y-comenzar-utilizar-conda/</li> <li>In English: https://cloudsmith.com/blog/what-is-conda/</li> </ul> <p>We recommend you to use mamba-forge, a combination of miniconda + conda-forge + mamba. You can download it from here: conda-forge/miniforge#mambaforge</p> <p>Ready to contribute? Here\u2019s how to set up LiteRev for local development.</p> <ol> <li>Clone this repository locally: <pre><code>$ git clone git@github.com:thegraphnetwork-literev/LiteRev.git\n</code></pre></li> <li>Create a conda environment and activate it: <pre><code>$ cd LiteRev\n$ mamba env create --file conda/base.yaml\n</code></pre> and <pre><code>$ conda activate literev\n</code></pre></li> <li>Install your local project copy into your conda environment: <pre><code>$ poetry install\n</code></pre></li> <li>Create a branch for local development: <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre></li> <li>When you\u2019re done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox: <pre><code>$ makim tests.lint\n$ makim tests.unittest\n</code></pre></li> <li>Commit your changes and push your branch to GitHub: <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre></li> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.1.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":""},{"location":"contributing/#debugging","title":"Debugging","text":"<p>This project uses pdb++ for debugging, so it would help in a bunch of ways. One of the most useful command you can use is <code>sticky</code> that will show you where is the current line that is executed, inside a context (some lines above and below), and for each <code>next</code> command, it will update the screen automatically.</p> <p>For more information, check its GitHub repository: pdbpp/pdbpp</p>"},{"location":"contributing/#env","title":".env","text":"<p>LiteRev manages the environment variables using <code>.env</code>. In order to have the services running, it is necessary to have a <code>.env</code> files, one in which of the following folders: <code>./</code> (root of the project), <code>./containers/literev/</code>, and <code>./containers/postgres/</code>.</p> <p>The <code>.env</code> file is not presented in the git repository, so it is necessary to create it locally. The easiest way to create that is from the <code>.env.tpl</code> inside which of that folders for example: <code>cp .env.tpl .env</code>. Next, change the values of the variables in which file for their desired values.</p> <p>These are examples of values used by all the three <code>.env</code> files:</p> <p><code>./.env</code>:</p> <pre><code>ENV=dev\nPOSTGRES_HOST=literev-postgres\nPOSTGRES_PORT=35432\nPOSTGRES_DB=postgres\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\nPOSTGRES_DB_LITEREV=literev\nPOSTGRES_USER_LITEREV=literev\nPOSTGRES_PASSWORD_LITEREV=literev\nFRONTEND_HOST_ADDRESS=literev\nFRONTEND_HOST_PORT=8000\n</code></pre> <p><code>./containers/literev/.env</code>:</p> <pre><code>NUMBER_ARTICLE_BY_PAGE=30\nNUMBER_THREADS_ALLOWED=4\nNUMBER_TRIALS=300\nUPDATE_INTERVAL=2700000\nX_INTERVAL_BIG=1000\nX_INTERVAL_LITTLE=500\nY_INTERVAL_BIG=4000\nY_INTERVAL_LITTLE=1000\nFRONTEND_HOST_ADDRESS=literev\nFRONTEND_HOST_PORT=8000\nDJANGO_SECRET_KEY=django-insecure-96*q09uh20(^i4sdxqh3n_v#d-$o=**7zrri&amp;k-j3@f10hm88)\nDJANGO_ENV=dev\nORCID_APP_ID=APP-31MN9C4D9DA27N9X\nORCID_APP_SECRET=d14daed7-aed2-4e5a-b4c2-6533195a6cb1\nORCID_BASE_DOMAIN=sandbox.orcid.org\n</code></pre> <p><code>./containers/postgresql/.env</code>:</p> <pre><code>POSTGRES_PORT=35432\nPOSTGRES_DB=postgres\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\nPOSTGRES_DB_LITEREV=literev\nPOSTGRES_USER_LITEREV=literev\nPOSTGRES_PASSWORD_LITEREV=literev\n</code></pre>"},{"location":"contributing/#docker","title":"Docker","text":"<p>The easiest way to run LiteRev is using docker. In order to have a simple workflow, LiteRev uses containers-sugar and makim.</p> <p>These are the steps necessary to have your services up and running:</p> <ol> <li><code>sugar build</code></li> <li><code>makim containers.migrate</code></li> <li><code>sugar ext restart</code></li> </ol> <p>These three steps should be enough to have the services running locally.</p>"},{"location":"contributing/#django","title":"Django","text":""},{"location":"contributing/#how-to-create-a-django-super-user","title":"How to create a django super user","text":"<p>In order to create a django super user, you can run the following command:</p> <pre><code>$  makim django.create-superuser \\\n--username myusername \\\n--password mypassword \\\n--email my@email.com\n</code></pre> <p>Note: Remember to replace the placeholder used in the command.</p>"},{"location":"contributing/#running-django-with-jupyter","title":"Running Django with Jupyter","text":"<p>Django Extensions allow us to run the LiteRev Django project inside a Jupyter Notebook.</p> <p>First, ensure you have the environment variable <code>POSTGRES_HOST=localhost</code> in your <code>.env</code> file. <code>.env</code> should be located in the root of the project.</p> <p>Then, load the environment variables:</p> <pre><code>$ export $(cat .env)\n</code></pre> <p>Finally, run Django in notebook mode:</p> <pre><code>$ python src/manage.py shell_plus --notebook\n</code></pre> <p>If you would like to share any experimental notebooks, please store it at <code>docs/notebooks</code>.</p> <p>If you have any issues while trying to follow the steps presented here, please check if the PostgreSQL service is running. You can start the server using the following command:</p> <pre><code>$ sugar ext restart --services literev-postgres --options -d\n</code></pre>"},{"location":"contributing/#tests","title":"Tests","text":"<p>To run a subset of tests, you can use the parameter <code>--params</code>. It is possible to pass module name, class name and/or test function name. For example,</p> <pre><code>$ makim tests.unittest --app BackEnd --params \"-v3 --failfast -k test_medrxiv_collector.MedrXivCollectorGetArticleParallelTestCase\"\n</code></pre>"},{"location":"contributing/#run-django-application","title":"Run Django application","text":"<p>You can run the django application using makim:</p> <pre><code>$ makim django.runserver\n</code></pre> <p>If you want to use it locally (instead of from a docker-container), run:</p> <pre><code>$ makim django.runserver --local\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>fix!: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"contributing/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Poetry package hash not found: Hash for  ()   from archive  not found in known hashes   (was: sha256:). <p>If you are experiencing this issue, maybe this command can fix that:</p> <pre><code>$ rm -rf ~/.cache/pypoetry\n</code></pre> <p>If it doesn't fix your problem, please check this github issue:   python-poetry/poetry#4523</p>"},{"location":"api/backend/admin/","title":"API - BackEnd.admin","text":""},{"location":"api/backend/admin/#admin-module-used-for-the-backend-app","title":"Admin module used for the Backend app.","text":""},{"location":"api/backend/admin/#BackEnd.admin","title":"<code>admin</code>","text":""},{"location":"api/backend/apps/","title":"API - BackEnd.apps","text":""},{"location":"api/backend/apps/#apps-module-used-for-the-backend-app","title":"Apps module used for the Backend app.","text":""},{"location":"api/backend/apps/#BackEnd.apps","title":"<code>apps</code>","text":""},{"location":"api/backend/functions/","title":"API - BackEnd.functions","text":""},{"location":"api/backend/functions/#backendfunctionsclustering","title":"BackEnd.functions.clustering","text":""},{"location":"api/backend/functions/#BackEnd.functions.clustering","title":"<code>clustering</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.clustering-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.clustering.hover_with_keywords","title":"<code>hover_with_keywords(research, list_id, embedding_2d, best_study_clusterer, tf_idf_sorted)</code>","text":"<p>Create a cluster from research articles.</p> <p>Create an object database model for every article according to list_id, extract the x,y coordinates from embedding_2d and make the clusters given by best_study_clusterer, every cluster has label extracted from tf_idf_sorted.</p> <p>Parameters:</p> Name Type Description Default <code>research</code> <code>Research object Model database</code> <p>The research object model where is used to store search query, status and related data.</p> required <code>list_id_final</code> <code>list of str</code> <p>list of id_articles related with the research</p> required <code>embedding_2d</code> <code>A numpy array wich reduces dimensionality to visualize</code> <p>better the clusters</p> required <code>best_study_clusterer</code> <code>optuna.study.Study</code> <p>An object used to optimize parameters and create clusters with embedding_2d.</p> required <code>tf_idf_sorted</code> <code>pandas DataFrame</code> <p>Storage the tf-idf index for each word in articles. A dataframe with keywords as row index in the columns the article related.</p> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"api/backend/functions/#BackEnd.functions.clustering.hover_with_keywords--notes","title":"Notes","text":"<p>Create a cluster object database model for every article according to list_id, with research, article_id, pos_x, pos_y and labels</p>"},{"location":"api/backend/functions/#backendfunctionsjournal_collectorsarxiv_collector","title":"BackEnd.functions.journal_collectors.arxiv_collector","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector","title":"<code>arxiv_collector</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector","title":"<code>ArXivCollector</code>","text":"<p>             Bases: <code>TheXivesCollector</code></p> <p>Some methods for this class are defined at <code>base.py:TheXivesCollector</code>. Some of the methods for ArXivCollector overlap with the ones for medrXiv and biorXiv, so instead of defining them thrice we overwrite the methods specific for each one in their own files.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.extract_author","title":"<code>extract_author(entry)</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.extract_author--notes","title":"Notes","text":"<p>Authors appear in the HTML document as:</p> <p>      Authors:         Author 1   ,        Author 2   ,        Author 3    </p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.extract_date","title":"<code>extract_date(entry)</code>","text":"<p>As an example, date appears in the HTML document as:</p> <p>      Submitted        24 March, 2019;        v1        submitted 17 August, 2018;        originally announced        August 2018. </p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.generate_base_query","title":"<code>generate_base_query(search_term, begin, end, page=None)</code>","text":"<p>Generates the base query according to the search term, page number and articles by page.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.get_dict_markup_lang","title":"<code>get_dict_markup_lang(search_term, begin, end, entries=[])</code>","text":"<p>Returns a list of article IDs.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.get_max_count","title":"<code>get_max_count(soup)</code>","text":"<p>Returns the number of articles resulting from a soupified HTML query.</p> <p>Parameters:</p> Name Type Description Default <code>soup</code> <code>bs4.BeautifulSoup</code> <p>The HTML page resulting from a query soupified using BeautifulSoup.</p> required <p>Returns:</p> Name Type Description <code>max_count</code> <code>int</code> <p>The number of articles resulting from the query.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.get_max_count--notes","title":"Notes","text":"<p>In the HTML document, the number of articles <code>max_count</code> appears in:</p>      Showing `initial_from_page`\u2013`final_from_page` of `max_count`     results"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.get_url_response","title":"<code>get_url_response(query)</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.arxiv_collector.ArXivCollector.get_url_response--notes","title":"Notes","text":"<p>arXiv's advanced search returns an HTML document.</p>"},{"location":"api/backend/functions/#backendfunctionsjournal_collectorsbase","title":"BackEnd.functions.journal_collectors.base","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base","title":"<code>base</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.BaseCollector","title":"<code>BaseCollector</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.BaseCollector-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.BaseCollector.extract_pdf_full_text","title":"<code>extract_pdf_full_text(article)</code>","text":"<p>Extracts the full text from the PDF file of an article.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.BaseCollector.generate_threads","title":"<code>generate_threads(search, research, begin, end, number_threads=1)</code>","text":"<p>Retrieve articles using parallel threads based on the provided search parameters.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.BaseCollector.get_articles_parallel","title":"<code>get_articles_parallel(research, dict_id_soup)</code>","text":"<p>Fetch articles in parallel and store them in the database.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.BaseCollector.get_search_term","title":"<code>get_search_term(search)</code>","text":"<p>Translates the search to a readable string search for the API</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.BaseCollector.separate_ymd_from_date","title":"<code>separate_ymd_from_date(date)</code>","text":"<p>Separates year, month, and day as strings from the given date object.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector","title":"<code>PMAndPMCCollector</code>","text":"<p>             Bases: <code>BaseCollector</code></p> <p>This class is basically made of methods for PMCollector. Some of the functions overlap with the PMCCollector, so we define the methods for PMCollector here and overwrite the methods specific for PMCCollector on <code>pmc_collector.py</code>.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.extract_abstract","title":"<code>extract_abstract(entry)</code>","text":"<p>Extracts the full abstract, not always available.        Itertext takes all text between the abstract tags, so we remove all</p> <p>characters and superfluous spaces.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.extract_author","title":"<code>extract_author(entry)</code>","text":"<p>Extracts the author names from the XML document.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.extract_date","title":"<code>extract_date(entry)</code>","text":"<p>Extracts the date from the XML document and returns a datetime.date object.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.extract_doi","title":"<code>extract_doi(entry)</code>","text":"<p>Extracts the DOI from the XML document.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.extract_metadata_from_identifier","title":"<code>extract_metadata_from_identifier(identifier)</code>","text":"<p>Extract metadata from the identifier input and return a dictionary with these data.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.extract_title","title":"<code>extract_title(entry)</code>","text":"<p>Extracts the title from the XML document.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.extract_url","title":"<code>extract_url(entry)</code>","text":"<p>Extracts the URL based on the DOI.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.generate_addr_fetch","title":"<code>generate_addr_fetch(identifier)</code>","text":"<p>Generates the API fetch address for retrieving data based on the provided identifier.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.generate_base_query","title":"<code>generate_base_query(search_term, begin, end)</code>","text":"<p>Generates the base query according to the API, database, search term, begin and end dates.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.generate_id_list","title":"<code>generate_id_list(entry)</code>","text":"<p>Generates a list of IDs from the XML document.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.get_list_id","title":"<code>get_list_id(search_term, begin, end)</code>","text":"<p>Returns a list of article IDs.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.get_max_articles","title":"<code>get_max_articles(search, begin, end)</code>","text":"<p>Returns the maximum number of articles for the given search query and date range</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.get_url_response","title":"<code>get_url_response(query)</code>","text":"<p>Returns a XML doc.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.PMAndPMCCollector.prepare_articles_parallel","title":"<code>prepare_articles_parallel(research, identifier, dict_id_soup={})</code>","text":"<p>Return True if the outer loop should keep going or False if it should run <code>continue</code> statement.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.TheXivesCollector","title":"<code>TheXivesCollector</code>","text":"<p>             Bases: <code>BaseCollector</code></p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.TheXivesCollector-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.TheXivesCollector.generate_base_query","title":"<code>generate_base_query(search_term, begin, end, page=0)</code>","text":"<p>Generates the base query according to the API, database, search term, begin and end dates.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.TheXivesCollector.get_dict_markup_lang","title":"<code>get_dict_markup_lang(search_term, begin, end, entries=[])</code>","text":"<p>Returns a list of article IDs.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.TheXivesCollector.get_max_articles","title":"<code>get_max_articles(search, begin, end)</code>","text":"<p>Returns the maximum number of articles for the given search query and date range.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base.TheXivesCollector.prepare_articles_parallel","title":"<code>prepare_articles_parallel(research, identifier, dict_id_soup={})</code>","text":"<p>Return True if the outer loop should keep going or False if it should run <code>continue</code> statement.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.base._get_articles_parallel_wrapper","title":"<code>_get_articles_parallel_wrapper(args)</code>","text":"<p>Execute get_articles_parallel from the given object.</p> <p>This is a wrapper to BaseCollector.get_articles_parallel that needs to be called by multiprocessing.</p>"},{"location":"api/backend/functions/#backendfunctionsjournal_collectorsbiorxiv_collector","title":"BackEnd.functions.journal_collectors.biorxiv_collector","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.biorxiv_collector","title":"<code>biorxiv_collector</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.biorxiv_collector-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.biorxiv_collector.BiorXivCollector","title":"<code>BiorXivCollector</code>","text":"<p>             Bases: <code>TheXivesCollector</code></p> <p>The methods for this class are defined at <code>base.py:TheXivesCollector</code>. Some of the methods for BiorXivCollector overlap with the ones for medrXiv and arXiv, so instead of defining them thrice we overwrite the methods specific for each one in their own files.</p>"},{"location":"api/backend/functions/#backendfunctionsjournal_collectorsmedrxiv_collector","title":"BackEnd.functions.journal_collectors.medrxiv_collector","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.medrxiv_collector","title":"<code>medrxiv_collector</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.medrxiv_collector-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.medrxiv_collector.MedrXivCollector","title":"<code>MedrXivCollector</code>","text":"<p>             Bases: <code>TheXivesCollector</code></p> <p>The methods for this class are defined at <code>base.py:TheXivesCollector</code>. Some of the methods for MedrXivCollector overlap with the ones for biorXiv and arXiv, so instead of defining them thrice we overwrite the methods specific for each one in their own files.</p>"},{"location":"api/backend/functions/#backendfunctionsjournal_collectorspm_collector","title":"BackEnd.functions.journal_collectors.pm_collector","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pm_collector","title":"<code>pm_collector</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pm_collector-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pm_collector.PMCollector","title":"<code>PMCollector</code>","text":"<p>             Bases: <code>PMAndPMCCollector</code></p> <p>The methods for this class are defined at <code>base.py:PMAndPMCCollector</code>. Some of the methods for PMCollector overlap with the ones for PMCCollector, so instead of defining them twice we overwrite the methods specific for PMCCollector on <code>pmc_collector.py</code>.</p>"},{"location":"api/backend/functions/#backendfunctionsjournal_collectorspmc_collector","title":"BackEnd.functions.journal_collectors.pmc_collector","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector","title":"<code>pmc_collector</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector.PMCCollector","title":"<code>PMCCollector</code>","text":"<p>             Bases: <code>PMAndPMCCollector</code></p> <p>Most of the methods for this class are defined at <code>base.py: PMAndPMCCollector</code>. Some of the methods for PMCCollector overlap with the ones for PMCCollector, so instead of defining them twice we overwrite the methods specific for PMCCollector here.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector.PMCCollector-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector.PMCCollector.extract_abstract","title":"<code>extract_abstract(entry)</code>","text":"<p>Extracts the full abstract, not always available.        Itertext takes all text between the abstract tags, so we remove all</p> <p>characters and superfluous spaces.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector.PMCCollector.extract_author","title":"<code>extract_author(entry)</code>","text":"<p>Extracts the author names from the XML document.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector.PMCCollector.extract_date","title":"<code>extract_date(entry)</code>","text":"<p>Extracts the date from the XML document and returns a datetime.date object.</p>"},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.pmc_collector.PMCCollector.extract_doi","title":"<code>extract_doi(entry)</code>","text":"<p>Extracts the DOI from the XML document.</p>"},{"location":"api/backend/functions/#backendfunctionsjournal_collectorstypes","title":"BackEnd.functions.journal_collectors.types","text":""},{"location":"api/backend/functions/#BackEnd.functions.journal_collectors.types","title":"<code>types</code>","text":""},{"location":"api/backend/functions/#backendfunctionsnlp","title":"BackEnd.functions.nlp","text":""},{"location":"api/backend/functions/#BackEnd.functions.nlp","title":"<code>nlp</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.nlp-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.nlp.call_openai_chatgpt","title":"<code>call_openai_chatgpt(question='', keywords='HIV, infant, pregnancy', api_key=settings.OPENAI_API_KEY)</code>","text":"<p>Standard function to call ChatGPT through OpenAI's python package. More info: https://platform.openai.com/docs/guides/chat/introduction</p>"},{"location":"api/backend/functions/#BackEnd.functions.nlp.list_as_string","title":"<code>list_as_string(input_list, glue=', ')</code>","text":"<p>Auxiliary function. Reads a list and concatenates it as a string, using <code>glue</code> as the character joining each element of the list.</p>"},{"location":"api/backend/functions/#BackEnd.functions.nlp.nlp_topic_description","title":"<code>nlp_topic_description(input_list, api_key)</code>","text":"<p>Reads keywords and returns a description according to ChatGPT.</p>"},{"location":"api/backend/functions/#backendfunctionsscatter_with_hover","title":"BackEnd.functions.scatter_with_hover","text":""},{"location":"api/backend/functions/#BackEnd.functions.scatter_with_hover","title":"<code>scatter_with_hover</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.scatter_with_hover-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.scatter_with_hover.scatter_with_hover","title":"<code>scatter_with_hover(research, path, fig=None, name=None, marker='circle', fig_width=1500, fig_height=900)</code>","text":"<p>Creates a html Plot file an interactive scatter plot of <code>x</code> vs <code>y</code> using bokeh, with automatic tooltips showing columns from Cluters objects model database related with research object model database.</p> <p>Parameters:</p> Name Type Description Default <code>research</code> <code>Research object Model database</code> <pre><code>   The research object model where is used to store\n   search query, status and related data.\n</code></pre> required <code>path</code> <code>(str, Path)</code> <p>Full path to where the html plot file will be stored    after being generated</p> required <code>fig</code> <code>bokeh.plotting.Figure</code> <p>Figure on which to plot (if not given then a new figure will be created)</p> <code>None</code> <code>name</code> <code>str</code> <p>Bokeh series name to give to the scattered data</p> <code>None</code> <code>marker</code> <code>str</code> <p>Name of marker to use for scatter plot</p> <code>circle</code> <code>fig_width</code> <code>int</code> <pre><code>    with of the resulting plot.\n</code></pre> <code>1800</code> <code>fig_height</code> <code>int</code> <pre><code>     height of the resulting plot.\n</code></pre> <code>900</code> <p>Returns:</p> Type Description <code>None</code>"},{"location":"api/backend/functions/#BackEnd.functions.scatter_with_hover.scatter_with_hover--notes","title":"Notes","text":"<p>Creates a html Plot file from Clusters objects and store in the path</p>"},{"location":"api/backend/functions/#BackEnd.functions.scatter_with_hover.scatter_with_hover--acknowledgment","title":"Acknowledgment","text":"<p>Original code from Robin Wilson robin@rtwilson.com with thanks to Max Albert for original code example</p>"},{"location":"api/backend/functions/#backendfunctionsview_functions","title":"BackEnd.functions.view_functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.view_functions","title":"<code>view_functions</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.view_functions-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.view_functions-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.view_functions.back_process","title":"<code>back_process(research)</code>","text":"<p>Controls the whole process of researching from extracting articles, preprocess text, clustering, and plotting. This function allows to restart proccess that have been interrupted and continue to the point where it was stopped. When finalizes deletes all extra data that could be used in intemediate steps.</p> <p>Parameters:</p> Name Type Description Default <code>research</code> <code>Research object Model database</code> <pre><code>   The research object model where is used to store\n   search query, status and related data.\n</code></pre> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.back_process--notes","title":"Notes","text":"<p>Modify the research object model database</p>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.check","title":"<code>check(research)</code>","text":"<p>check if the thread of the research is alive</p>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.make_cluster","title":"<code>make_cluster(research, list_id, tf_idf, n_trials, n_threads, tf_idf_sorted)</code>","text":"<p>Prepare from the entry args the data needed for create a cluster object database model use a pacmap object to optimize and reduce dimensionality.</p> <p>Parameters:</p> Name Type Description Default <code>research</code> <code>Research object Model database</code> <pre><code>   The research object model where is used to store\n   search query, status and related data.\n</code></pre> required <code>list_id_final</code> <code>list of str</code> <pre><code>        list of id_articles related with the research\n</code></pre> required <code>tf_idf</code> <code>scipy sparse matrix</code> <pre><code> Matrix which has tf-idf for each relevant word\nin articles.\n</code></pre> required <code>n_trial</code> <code>int</code> <pre><code>  Number of times that will search for the optimal\ncluster distribution.\n</code></pre> required <code>n_threads</code> <code>int</code> <pre><code>    Number of parallel processing\n</code></pre> required <code>tf_idf_sorted</code> <code>pandas DataFrame</code> <pre><code>        Storage the tf-idf index for each word in\narticles. A dataframe with keywords\nas row index in the columns the\narticle related.\n</code></pre> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.make_cluster--notes","title":"Notes","text":"<p>Create a clusters object database model and the clusters objects will be used to generate the clusters plot.</p>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.make_preprocessing","title":"<code>make_preprocessing(research, corpus='abstract', number_threads=1)</code>","text":"<p>Preprocesses the research data and returns the tf-idf matrix, sorted tf-idf matrix, list of ids and list of preprocessed text.</p> <p>Parameters:</p> Name Type Description Default <code>research</code> <code>Research object Model database</code> <pre><code>   The research object model where is used to store\n   search query, status and related data.\n</code></pre> required <code>corpus</code> <code>str</code> <pre><code> The selected corpus is used to preprocess text\n it could be 'full_text' pdf or 'abstract or 'both'.\n</code></pre> <code>'abstract'</code> <code>number_thread</code> <code>int</code> <pre><code>        Number of threads that will be processed in parallel.\n</code></pre> <code>1</code> <p>Returns:</p> Name Type Description <code>tf_idf</code> <code>scipy sparse matrix</code> <p>Matrix which has tf-idf for each relevant word in articles.</p> <code>tf_idf_sorted</code> <code>pandas DataFrame</code> <p>Storage the tf-idf index for each word in articles. A dataframe with keywords as row index in the columns the article related.</p> <code>list_id_final</code> <code>list of str</code> <p>list of id_articles related with the research</p> <code>list_final</code> <code>list of str</code> <p>Every element of the list correspond to the extracted text from the article</p>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.preprocessing_parallel","title":"<code>preprocessing_parallel(research, articles, corpus)</code>","text":"<p>Preprocess the text from the articles related with the research and creates Preprocess_text object model database for every word preproccessed and a  Number_preprocess model database as a flag to inicate that the research has processed text. This method will be parallelized</p> <p>Parameters:</p> Name Type Description Default <code>research</code> <code>Research object Model database</code> <pre><code>   The research object model where is used to store\n   search query, status and related data.\n</code></pre> required <code>articles</code> <code>(List[Article], queryset)</code> <pre><code>   List of articles related with the research\n</code></pre> required <code>corpus</code> <code>str</code> <pre><code> The selected corpus is used to preprocess text\n it could be 'full_text' pdf or 'abstract or 'both'.\n</code></pre> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.preprocessing_parallel--notes","title":"Notes","text":"<p>Create Preprocess_text objects model database for every word preproccessed and Number_preprocess objects model database as a flag to indicate that the research has processed text.</p>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.print_research","title":"<code>print_research(log_text, research_id)</code>","text":"<p>Print a log message in the research logfile.</p>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.relaunch_if_fault_all","title":"<code>relaunch_if_fault_all()</code>","text":"<p>Check if there is a research who is running but there is no more thread alive.</p>"},{"location":"api/backend/functions/#BackEnd.functions.view_functions.update_research","title":"<code>update_research()</code>","text":"<p>This is a infinity loop who every 1 month, restart all research who is finished. But, between each restart, give some time so the host doesn't freeze</p>"},{"location":"api/backend/functions/#backendfunctionsfilter_article","title":"BackEnd.functions.filter_article","text":""},{"location":"api/backend/functions/#BackEnd.functions.filter_article","title":"<code>filter_article</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.filter_article-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.filter_article.parsing","title":"<code>parsing(list_term, dict_keyword)</code>","text":"<p>for each keywords, it has a list of number. Output: a list of number who correspond of the parsing's result This method works in reccurance call. It returns the result of logical calcul between the first term and the rest.</p>"},{"location":"api/backend/functions/#BackEnd.functions.filter_article.split_search_term","title":"<code>split_search_term(search_term)</code>","text":"<p>Take the search term and return a list of each element ( and, word, parenthesis, etc) in order and dictionary where the key is a keyword and the value is a list. It will fill with id of article</p>"},{"location":"api/backend/functions/#backendfunctionspdf_download","title":"BackEnd.functions.PDF_download","text":""},{"location":"api/backend/functions/#BackEnd.functions.PDF_download","title":"<code>PDF_download</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.PDF_download-classes","title":"Classes","text":""},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler","title":"<code>PDFHandler</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.convert_pdf","title":"<code>convert_pdf(path_file)</code>","text":"<p>Converts PDF to text to do text processing.</p> <p>Parameters:</p> Name Type Description Default <code>path_file</code> <code>str</code> <pre><code>    path to the pdf file.\n</code></pre> required <p>Returns:</p> Name Type Description <code>text</code> <code>str</code> <p>the text conversion of the pdf</p>"},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.download_from_url","title":"<code>download_from_url(article, filename)</code>","text":"<p>Downloads a PDF from a direct URL.</p> <p>Parameters:</p> Name Type Description Default <code>article</code> <code>Article object Model</code> <pre><code>An object wich has in its attribs\nThe URL to the pdf file.\n</code></pre> required <code>filename</code> <code>str</code> <pre><code>The filename to use for the downloaded file.\nit includes the full path and name.\n</code></pre> required <p>Returns:</p> Name Type Description <code>status</code> <code>bool</code> <p>Returns True if the PDF was saved successfully, False otherwise.</p>"},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.extract_full_text","title":"<code>extract_full_text(article)</code>","text":"<p>Downloads the corresponding PDF from the article's URL and extracts the full text. Returns the full text or an empty string if there was a problem. If DOWLOAD_PDF_ARTICLE flag is set to False, just return \"\".</p> <p>Parameters:</p> Name Type Description Default <code>article</code> <code>Article object Model</code> <pre><code>the article object.\n</code></pre> required <p>Returns:</p> Name Type Description <code>full_text</code> <code>str</code> <p>the text conversion of the pdf</p>"},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.extract_full_text--notes","title":"Notes","text":"<p>If DOWLOAD_PDF_ARTICLE flag is set to False, just return \"\".</p>"},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.get_url_from_doi","title":"<code>get_url_from_doi(doi)</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.get_url_from_doi--description","title":"Description","text":"<p>This function gets a direct URL to a pdf based on DOI</p>"},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.get_url_from_doi--takes","title":"Takes","text":"<p>DOI (string): URL to the PDF file</p> <p>Returns:</p> Name Type Description <code>url_pdf</code> <code>str or None</code> <p>URL to the PDF file.</p>"},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.remove_char","title":"<code>remove_char(string)</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.remove_char--description","title":"Description","text":"<p>This function removes unwanted characters</p>"},{"location":"api/backend/functions/#BackEnd.functions.PDF_download.PDFHandler.remove_char--takes","title":"Takes","text":"<p>string (string)</p>"},{"location":"api/backend/functions/#backendfunctionsremove_references","title":"BackEnd.functions.Remove_references","text":""},{"location":"api/backend/functions/#BackEnd.functions.Remove_references","title":"<code>Remove_references</code>","text":""},{"location":"api/backend/functions/#backendfunctionstext_processing","title":"BackEnd.functions.text_processing","text":""},{"location":"api/backend/functions/#BackEnd.functions.text_processing","title":"<code>text_processing</code>","text":""},{"location":"api/backend/functions/#BackEnd.functions.text_processing-functions","title":"Functions","text":""},{"location":"api/backend/functions/#BackEnd.functions.text_processing.create_stopwords","title":"<code>create_stopwords()</code>","text":"<p>Create a new set of stopwords from a file.</p> <p>Returns:</p> Name Type Description <code>stopwords</code> <code>Set[str]</code> <p>A set of stopwords.</p>"},{"location":"api/backend/functions/#BackEnd.functions.text_processing.lemmatization","title":"<code>lemmatization(list_words, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])</code>","text":"<p>Lemmatize a list of words.</p> <p>Parameters:</p> Name Type Description Default <code>list_words</code> <code>List[str]</code> <pre><code>  A list of words.\n</code></pre> required <code>allowed_postags</code> <code>List[str]</code> <pre><code>  A list of allowed POS tags.\n</code></pre> <code>['NOUN', 'ADJ', 'VERB', 'ADV']</code> <p>Returns:</p> Name Type Description <code>list_lemmatized</code> <code>List[str]</code> <p>A list of lemmatized words.</p>"},{"location":"api/backend/functions/#BackEnd.functions.text_processing.pre_processing","title":"<code>pre_processing(df_to_list)</code>","text":"<p>Preprocess a list of strings by removing special characters and digits.</p> <p>Parameters:</p> Name Type Description Default <code>df_to_list</code> <code>List[str]</code> <pre><code>  A list of strings.\n</code></pre> required <p>Returns:</p> Name Type Description <code>list_preprocessing</code> <code>List[str]</code> <p>A list of preprocessed strings.</p>"},{"location":"api/backend/functions/#BackEnd.functions.text_processing.remove_misspelled","title":"<code>remove_misspelled(list_one_two)</code>","text":"<p>Receive a list of words and for each word Check if the word is in the dictionary_compact.json file, If the word is not in the dictionary, return the corrected word, Otherwise, return the original word</p>"},{"location":"api/backend/functions/#BackEnd.functions.text_processing.remove_words","title":"<code>remove_words(list_lemmatized, list_stopwords)</code>","text":"<p>Receive a list of words and a list of stopwords, Remove the stopwords from the list of words, Return a list with the remaining words</p>"},{"location":"api/backend/functions/#BackEnd.functions.text_processing.sent_to_words","title":"<code>sent_to_words(list_languages)</code>","text":"<p>Receive a list of sentences and for each sentence Convert into a list of lowercase tokens, ignoring tokens that are too short or too long (remove accents as well). For each sentence return a list with the processed words</p>"},{"location":"api/backend/models/","title":"API - BackEnd.models","text":""},{"location":"api/backend/models/#BackEnd.models","title":"<code>models</code>","text":""},{"location":"api/backend/views/","title":"API - BackEnd.views","text":""},{"location":"api/backend/views/#BackEnd.views","title":"<code>views</code>","text":""},{"location":"api/backend/views/#BackEnd.views-functions","title":"Functions","text":""},{"location":"api/database/admin/","title":"API - DataBase.admin","text":""},{"location":"api/database/admin/#DataBase.admin","title":"<code>admin</code>","text":""},{"location":"api/database/apps/","title":"API - DataBase.apps","text":""},{"location":"api/database/apps/#DataBase.apps","title":"<code>apps</code>","text":""},{"location":"api/database/models/","title":"API - DataBase.models","text":""},{"location":"api/database/models/#DataBase.models","title":"<code>models</code>","text":""},{"location":"api/database/views/","title":"API - DataBase.views","text":""},{"location":"api/database/views/#DataBase.views","title":"<code>views</code>","text":""},{"location":"api/database/views/#DataBase.views-classes","title":"Classes","text":""},{"location":"api/database/views/#DataBase.views-functions","title":"Functions","text":""},{"location":"api/ui/admin/","title":"API - UI_Front.admin","text":""},{"location":"api/ui/admin/#UI_Front.admin","title":"<code>admin</code>","text":""},{"location":"api/ui/apps/","title":"API - UI_Front.apps","text":""},{"location":"api/ui/apps/#UI_Front.apps","title":"<code>apps</code>","text":""},{"location":"api/ui/forms/","title":"API - UI_Front.forms","text":""},{"location":"api/ui/forms/#UI_Front.forms","title":"<code>forms</code>","text":""},{"location":"api/ui/forms/#UI_Front.forms-functions","title":"Functions","text":""},{"location":"api/ui/forms/#UI_Front.forms.error_parsing_historical","title":"<code>error_parsing_historical(search_string)</code>","text":"<p>Check if there are errors in the string search for historical</p>"},{"location":"api/ui/forms/#UI_Front.forms.error_parsing_research","title":"<code>error_parsing_research(string_to_parse)</code>","text":"<p>Check if there is error syntax in the search string for the research</p>"},{"location":"api/ui/functions/","title":"API - UI_Front.functions","text":""},{"location":"api/ui/functions/#ui_frontfunctionsselect_functions","title":"UI_Front.functions.select_functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.select_functions","title":"<code>select_functions</code>","text":""},{"location":"api/ui/functions/#UI_Front.functions.select_functions-functions","title":"Functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.select_functions.filter_recover_data","title":"<code>filter_recover_data(post_data)</code>","text":"<p>If cancel and return to the page of selection with all filter. We recuperate data so can write them in the html page input : dictionnary with key in format= \"filter_X_Y\" X is the numero of the filter and Y the numero of element in the filter     value is a string. The format of each string is     \"Type:data_type;name_value:value;\"     for data_type = topic -&gt; \"Type:topic;topic_name:name_of_topic\"     name of topic is in format [A-Za-z0-9_,-\\s]+ .     for data_type = author -&gt; \"Type:author;name:name;\"     name format is [A-Za-z0-9-\\s_]. It can be without name     for data_type = keyword -&gt; \"Type:keyword;keyword:value;\"     the value can be [A-Za-z0-9-\\s_]     for data_type = neighbour -&gt; \"Type:neighbour;DOI:value;</p> <p>output :     dictionnary of dictionnary. each dictionnary is a filter block     and have the keys:topic,author,keyword and doi. each of them is     a list of value</p>"},{"location":"api/ui/functions/#UI_Front.functions.select_functions.filters_manager","title":"<code>filters_manager(research, post_data)</code>","text":"<p>We first give the research object. We secondly give the dictionnary with post data and return a dictionnary: input:     dictionnary with key in format= \"filter_X_Y\" X is     the numero of the filter and Y the numero of the element in the     filter.     value is a string. The format of each string is     \"Type:data_type;name_value:value;\"     for data_type = topic -&gt; \"Type:topic;topic_name:name_of_topic;\"     name of topic is in format [A-Za-z0-9_,-\\s]+ .     for data_type = author -&gt; \"Type:author;name:name;\"     name format is [A-Za-z0-9-\\s_]. It can be without name     for data_type = keyword -&gt; \"Type:keyword;keyword:value;\"     the value can be [A-Za-z0-9-\\s_]     for data_type = neighbour -&gt; \"Type:neighbour;DOI:value;\"</p> <p>output:     dictionnary in this format     dict[\"filter_[0-9]+\"] . The key represent the name of a     filter and the value is a dictionnary in this format:         dict[\"type of value\"] = list of these value.         type of value = 'topic', value = [\"topic1\",\"topic2\",etc...],         topic name         type of value = 'author', value = a list of the Author objects         that name match with last_name and/or first_name match         type of value = 'keyword', value = [\"key1\",\"key2\",etc...]         type of value = 'neighbour'         value = [article_object that has the same doi in input]</p>"},{"location":"api/ui/functions/#UI_Front.functions.select_functions.get_articles_filtered","title":"<code>get_articles_filtered(research, filters)</code>","text":"<p>The function take the research id and filters, build a list of article who match the filters and return the list of the article id. If choose id instead of the object,this is to save it in user session as a list of integer.</p> <p>input: dictionnary in this format     dict[\"filter_[0-9]+\"] . The key represent the name of a filter     and the value is a dictionnary in this format:         dict[\"type of value\"] = list of these value.         type of value = 'topic', value = [\"topic1\",\"topic2\",etc...],             topic name         type of value = 'author', value = a list of the Author objects         that last_name and/or first_name match         type of value = 'keyword', value = [\"key1\",\"key2\",etc...]         type of value = 'neighbour'         value = [article_object that has the same doi in input]</p> <p>output: list of objects of Article</p>"},{"location":"api/ui/functions/#ui_frontfunctionstablechoice_functions","title":"UI_Front.functions.tablechoice_functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions","title":"<code>tablechoice_functions</code>","text":""},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions-functions","title":"Functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions.all_display_table_choice","title":"<code>all_display_table_choice(user, research)</code>","text":"<p>Reset all article so can display all article</p>"},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions.download_finalcsv","title":"<code>download_finalcsv(research, user)</code>","text":"<p>Return a csv file as attachment.</p> <p>Parameters:</p> Name Type Description Default <code>research</code> <code>Research object Model database</code> <pre><code>   The research object model where is used to store\n   search query, status and related data.\n</code></pre> required <code>user</code> <code>User</code> <p>A User object related with the data of the user.</p> required <p>Returns:</p> Name Type Description <code>response</code> <code>HttpResponse</code> <p>A csv file as attachment.</p>"},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions.reset_table_choice","title":"<code>reset_table_choice(user, research)</code>","text":"<p>To reset, delete all row who have been added and put to_display to true</p>"},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions.update_article_is_check_table_choice","title":"<code>update_article_is_check_table_choice(user, research, list_id)</code>","text":"<p>The function take a list of id object of TableChoice row and user. All row who is in list_id, the boolean 'is_check' will be put to True. The function take user id by security. We check if all id in 'list_id' is owned by user because, the list of id come from the front-end by the user</p>"},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions.update_article_to_display_table_choice","title":"<code>update_article_to_display_table_choice(user, research, list_id)</code>","text":"<p>The function take a list of id object of TableChoice row and user. All row who is not in list_id, the boolean 'to_display' will be put to False. The function take user id by security. We check if all id in 'list_id' is owned by user because, the list of id come from the front-end by the user</p>"},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions.update_neighbour_table_choice","title":"<code>update_neighbour_table_choice(user, research)</code>","text":"<p>With an initial list of article from all row who are to_display True, add the nearest neighbour of these article in table choice.</p>"},{"location":"api/ui/functions/#UI_Front.functions.tablechoice_functions.update_new_table_choice","title":"<code>update_new_table_choice(user, research, article_id_list)</code>","text":"<p>When user make a new research filtering, the ancients are deleted and the new are written</p>"},{"location":"api/ui/functions/#ui_frontfunctionsuser_page_functions","title":"UI_Front.functions.user_page_functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.user_page_functions","title":"<code>user_page_functions</code>","text":""},{"location":"api/ui/functions/#ui_frontfunctionsutils_functions","title":"UI_Front.functions.utils_functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.utils_functions","title":"<code>utils_functions</code>","text":""},{"location":"api/ui/functions/#UI_Front.functions.utils_functions-functions","title":"Functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.utils_functions.neighbour_article","title":"<code>neighbour_article(article, research)</code>","text":"<p>Return a list of article but there isn't the center article in the list.</p> <p>The function take an article, a research and process with cluster object, the nearest neighbor. By default, take the 5 nearest. by iteration, search around the article +-100 and if doesn't have enough, the same but with +-200 around. We make max +-1000.</p>"},{"location":"api/ui/functions/#ui_frontfunctionswelcome_functions","title":"UI_Front.functions.welcome_functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.welcome_functions","title":"<code>welcome_functions</code>","text":""},{"location":"api/ui/functions/#UI_Front.functions.welcome_functions-functions","title":"Functions","text":""},{"location":"api/ui/functions/#UI_Front.functions.welcome_functions.sort_historical","title":"<code>sort_historical(research_dict, sort_type)</code>","text":"<p>Take a dictionary key: id of research, value: list of Keywords objects. Return a list sorted in this format: [(id research,[string keywords])]. For the sort type, it has 'pertinence', 'article+' and 'article-'</p>"},{"location":"api/ui/functions/#UI_Front.functions.welcome_functions.word_list","title":"<code>word_list(string_to_parse)</code>","text":"<p>From a search string that was control if there is bad characters, extract all keywords and return them</p>"},{"location":"api/ui/models/","title":"API - UI_Front.models","text":""},{"location":"api/ui/models/#UI_Front.models","title":"<code>models</code>","text":""},{"location":"api/ui/models/#UI_Front.models-classes","title":"Classes","text":""},{"location":"api/ui/models/#UI_Front.models.CustomUserManager","title":"<code>CustomUserManager</code>","text":"<p>             Bases: <code>BaseUserManager</code></p> <p>Custom user model manager where email is the unique identifiers for authentication instead of usernames.</p>"},{"location":"api/ui/models/#UI_Front.models.CustomUserManager-functions","title":"Functions","text":""},{"location":"api/ui/models/#UI_Front.models.CustomUserManager.create_superuser","title":"<code>create_superuser(email, password=None)</code>","text":"<p>Creates and saves a superuser with the given email, date of birth and password.</p>"},{"location":"api/ui/models/#UI_Front.models.CustomUserManager.create_user","title":"<code>create_user(email, password=None)</code>","text":"<p>Creates and saves a User with the given email, date of birth and password.</p>"},{"location":"api/ui/views/","title":"API - UI_Front.views","text":""},{"location":"api/ui/views/#UI_Front.views","title":"<code>views</code>","text":""},{"location":"api/ui/views/#UI_Front.views-functions","title":"Functions","text":""},{"location":"api/ui/views/#UI_Front.views.render_plot","title":"<code>render_plot(request)</code>","text":"<p>Renders the html file representing the plot of a research.</p>"}]}